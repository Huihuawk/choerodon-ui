(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{1693:function(e,t){e.exports={content:["section",["h2","When To Use"],["p","Almost anything can be represented in a tree structure. Examples include directories, organization hierarchies, biological classifications, countries, etc. The ",["code","Tree"]," component is a way of representing the hierarchical relationship between these things. You can also  expand, collapse, and select a treeNode within a ",["code","Tree"],"."]],meta:{category:"Pro Components",type:"Data Display",title:"Tree",filename:"components-pro/tree/index.en-US.md"},toc:["ul",["li",["a",{className:"bisheng-toc-h2",href:"#When-To-Use",title:"When To Use"},"When To Use"]],["li",["a",{className:"bisheng-toc-h2",href:"#API",title:"API"},"API"]]],api:["section",["h2","API"],["h3","Tree props"],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","dataSet"],["td","The data source binded to the tree."],["td","DataSet"],["td"]],["tr",["td","renderer"],["td","Node render hooks, only works when binding data sources."],["td","({ dataSet, record, text }) => ReactNode"],["td"]],["tr",["td","titleField"],["td","The node text corresponds to the field of the data source and only works when binding the data source."],["td","string"],["td"]],["tr",["td","defaultExpandAll"],["td","defalut expand all the node , when dataSet bind expandField ignore it"],["td","boolean"],["td","false"]],["tr",["td","defaultExpandedKeys"],["td","defalut expand these node dataSetbind expandField ignore it"],["td","string[]"],["td","[]"]],["tr",["td","defaultCheckedKeys"],["td","defalut check these node when dataSet bind checkField ignore it"],["td","string[]"],["td","[]"]],["tr",["td","defaultSelectKeys"],["td","defalut select these node when dataSet bind idField ignore it"],["td","string[]"],["td","[]"]],["tr",["td","treeNodeRenderer"],["td","customize cover Tree node props"],["td","((props: {record?: Record ","|"," null;dataSet?: DataSet ","|"," null;}) => TreeNodeRendererProps )"],["td","() => {}"]]]],["h3","TreeNodeRenderer props"],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","checkable"],["td","When Tree is checkable, set TreeNode display Checkbox or not"],["td","boolean"],["td","-"]],["tr",["td","disableCheckbox"],["td","Disables the checkbox of the treeNode"],["td","boolean"],["td","false"],["td"]],["tr",["td","disabled"],["td","Disables the treeNode"],["td","boolean"],["td","false"],["td"]],["tr",["td","icon"],["td","customize icon. When you pass component, whose render will receive full TreeNode props as component props"],["td","ReactNode/Function(props):ReactNode"],["td","-"],["td"]],["tr",["td","isLeaf"],["td","Determines if this is a leaf node(effective when ",["code","loadData"]," is specified)"],["td","boolean"],["td","false"],["td"]],["tr",["td","title"],["td","Title"],["td","string","|","ReactNode"],["td","'---'"],["td"]],["tr",["td","switcherIcon"],["td","customize node expand icon"],["td","React.ReactNode"],["td","((props: TreeNodeProps) => React.ReactNode)"],["td"]],["tr",["td","className"],["td","child node classname"],["td","string"],["td"]],["tr",["td","style"],["td","child node style"],["td","React.CSSProperties"],["td"]]]],["h3","DataSet related"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","titleField"],["td","when there have dataSet ,the node text would bing titleField"],["td","string"],["td"]],["tr",["td","selection"],["td","selection is false  Tree checkable is true ,You can implement the whole treenode click to trigger check"],["td","string","|","|","boolean"],["td","-"]]]],["p","More cases and properties please refer to ",["a",{title:null,href:"/components/tree/"},"Tree"],"。"]]}}}]);